{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "%matplotlib inline\n",
    "def track_eagle(make_figs=True):\n",
    "    long = np.random.randint(-10,10, size=3) \n",
    "    lat = np.random.randint(-10,10, size=3)  \n",
    "                                              \n",
    "                                             \n",
    "\n",
    "    dist1 = np.array([long[0],lat[0]])                             \n",
    "    dist2 = np.array([long[1],lat[1]])\n",
    "    dist3 = np.array([long[2],lat[2]])\n",
    "\n",
    "    dist_total = dist_total = [dist1[0] + dist2[0] + dist3[0], dist1[1] + dist2[1] + dist3[1]]                        \n",
    "    \n",
    "    disp = np.sqrt((dist_total[0]**2)+(dist_total[1]**2))                             \n",
    "    alpha = 10**-6\n",
    "    theta = np.arctan((dist_total[1])/(dist_total[0] + alpha))                            \n",
    "    theta = np.degrees(theta)                \n",
    "    \n",
    "    \n",
    "    plt.figure(figsize=(10,10))\n",
    "    plt.title('Philippine Eagle Flight Plotter')\n",
    "    plt.xlim(31.5,-30)\n",
    "    plt.ylim(31.5,-30)\n",
    "    plt.xlabel('Latitudinal Distance')\n",
    "    plt.ylabel('Longitudinal Distance')\n",
    "    plt.grid()\n",
    "    n = 2\n",
    "       \n",
    "    plt.quiver(0,0, dist1[0], dist1[1], \n",
    "               angles='xy', scale_units='xy',scale=1, color='red', \n",
    "               label='Trajectory 1: {:.2f}m.'.format(np.linalg.norm(dist1)))\n",
    "    plt.quiver(dist1[0], dist1[1], dist2[0], dist2[1], \n",
    "               angles='xy', scale_units='xy',scale=1, color='blue',\n",
    "              label='Trajectory 2: {:.2f}m.'.format(np.linalg.norm(dist2)))\n",
    "    plt.quiver(np.add(dist1[0],dist2[0]), np.add(dist1[1],dist2[1]),\n",
    "               dist3[0], dist3[1], angles='xy', scale_units='xy',scale=1, color='green',\n",
    "              label='Trajectory 3: {:.2f}m.'.format(np.linalg.norm(dist3)))\n",
    "    plt.quiver(0,0, dist_total[0], dist_total[1], \n",
    "               angles='xy', scale_units='xy',scale=1, color='orange',\n",
    "              label='Displacement: {:.2f}m. @ {:.2f}'.format(disp, theta))\n",
    "    \n",
    "    plt.legend()\n",
    "    \n",
    "    if make_figs:\n",
    "        plt.savefig(f'LinAlg-Lab2-PH Eagle-{int(disp)}@{int(theta)}.png', dpi=300)\n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "track_eagle(make_figs=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28, 31, 26)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "def eagle_kinematics(position, time):\n",
    "    req_shape = 4\n",
    "    velocity = np.zeros((req_shape-1,)) # it is [0,0,0] because the value of req_shape minus 1.\n",
    "    acceleration = np.zeros((req_shape-2,)) # it became [0,0] because of the value req_shape -2.\n",
    "    total_vector = np.array([t**3, t**2, t, 1]) # the t value multiply by the given number inside the array: [8,4,2,1]\n",
    "    if position.shape == (req_shape,):\n",
    "        velocity = np.array([3*position[0],2*position[1], position[2]]) # each array of x, multiple to the number of given velocity[6,3,2]\n",
    "        acceleration = np.array([2*velocity[0],velocity[1]]) # the elements of the array of velocity will be multiply[12.2]\n",
    "        position_total = np.sum(np.multiply(position, total_vector)) # is equal to 28\n",
    "        velocity_total = np.sum(np.multiply(velocity, total_vector[1:])) # is equal to 31\n",
    "        acceleration_total = np.sum(np.multiply(acceleration, total_vector[2:])) # is equal to 26.\n",
    "    else:\n",
    "        print(f'Input displacement vector is not valid. Make sure that the vector shape is ({req_shape},)')\n",
    "    return position_total, velocity_total, acceleration_total\n",
    "x = np.array([2,1,3,2])\n",
    "t = 2\n",
    "eagle_kinematics(x, t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def month_profit_trace(profit, reach, make_figs=True): \n",
    "    if (profit.shape == (4,)) and (reach.shape == (4,)): \n",
    "        week1 = np.array((reach[0], profit[0]))       \n",
    "        week2 = np.array((reach[1], profit[1]))\n",
    "        week3 = np.array((reach[2], profit[2]))\n",
    "        week4 = np.array((reach[3], profit[3]))\n",
    "        \n",
    "        week_total = [week1[0] + week2[0] + week3[0] + week4[0], week1[1] + week2[1] + week3[1] + week4[1]]       \n",
    "        week_performance = np.sqrt((week_total[0]**2)+(week_total[1]**2)) #i used np.sqr() function in this program\n",
    "        alpha = 10**-6\n",
    "        reach_gradient = np.arctan((week_total[1])/(week_total[0] + alpha))\n",
    "        reach_gradient = np.degrees(reach_gradient)\n",
    "\n",
    "        \n",
    "        plt.figure(figsize=(16,5))\n",
    "        plt.title('Bebang\\'s Month Post Efficiency')\n",
    "        plt.xlim(0,1.01*np.sum(reach))\n",
    "        plt.ylim(-np.sum(np.abs(profit)),np.sum(np.abs(profit)))\n",
    "        plt.xlabel('FB Post Reach Increment')\n",
    "        plt.ylabel('Profit')\n",
    "        plt.grid()\n",
    "        n = 2\n",
    "        plt.quiver(0,0, week1[0], week1[1],                                              \n",
    "                   angles='xy', scale_units='xy',scale=1, color='orange', width=0.0025,\n",
    "                   label='Week 1: {:.2f}'.format(np.linalg.norm(week1)))\n",
    "        plt.quiver(week1[0], week1[1], week2[0], week2[1], \n",
    "                   angles='xy', scale_units='xy',scale=1, color='pink', width=0.0025,\n",
    "                   label='Week 2: {:.2f}'.format(np.linalg.norm(week2)))\n",
    "        plt.quiver(np.add(week1[0], week2[0]), np.add(week1[1], week2[1]),               \n",
    "                   week3[0], week3[1], angles='xy', scale_units='xy',scale=1, color='violet', width=0.0025,\n",
    "                   label='Week 3: {:.2f}'.format(np.linalg.norm(week3)))\n",
    "        plt.quiver((week1[0] + week2[0] + week3[0]), (week1[1] + week2[1] + week3[1]),               \n",
    "                   week4[0], week4[1], angles='xy', scale_units='xy',scale=1, color='green', width=0.0025,\n",
    "                   label='Week 4: {:.2f}'.format(np.linalg.norm(week4)))\n",
    "        plt.quiver(0,0, week_total[0], week_total[1], \n",
    "                   angles='xy', scale_units='xy',scale=1, color='pink', width=0.005,\n",
    "                  label='Efficiency: {:.2f} @ {:.2f}'.format(week_performance, reach_gradient))\n",
    "        plt.legend(loc='upper left')\n",
    "        if make_figs:\n",
    "            plt.savefig(f'LinAlg-Lab  2-Bebang Post Eff-{int(week_performance)}@{int(reach_gradient)}.png', dpi=300)\n",
    "        plt.show()\n",
    "    else:\n",
    "        print('Monthly Efficiency unsuccessful.')  \n",
    "\n",
    "profit= np.array([-23000, 2998, 5003, 11000])    \n",
    "reach = np.array([2020, 500, 350, 500])               \n",
    "month_profit_trace(profit, reach, make_figs=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
